name: STM32MP157 Build

on:
  push:
    branches:
      - main  # Триггер на пуши в ветку main
  pull_request:
    branches:
      - main  # Триггер на пул-реквесты в ветку main

env:
  ARCH: arm
  CROSS_COMPILE: arm-none-eabi-

jobs:
  build:
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # Клонируем репозиторий

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git wget bzip2 \
        python3 python3-pip python3-setuptools python3-wheel \
        device-tree-compiler bc u-boot-tools libgnutls28-dev \
        gcc-arm-none-eabi debootstrap  # Установите debootstrap

    - name: Check ARM compiler version
      run: |
        arm-none-eabi-gcc --version

    - name: Cache U-Boot
      uses: actions/cache@v3
      with:
        path: u-boot
        key: u-boot-${{ runner.os }}-${{ hashFiles('u-boot/**') }}
        restore-keys: |
          u-boot-${{ runner.os }}-

    - name: Build U-Boot
      run: |
        if [ -d "u-boot" ]; then
          rm -rf u-boot  # Удаляем существующую директорию, если она есть
        fi
        git clone https://github.com/u-boot/u-boot.git
        cd u-boot
        make stm32mp15_defconfig
        make -j$(nproc)

    - name: Cache Linux Kernel
      uses: actions/cache@v3
      with:
        path: linux
        key: linux-${{ runner.os }}-${{ hashFiles('linux/**') }}
        restore-keys: |
          linux-${{ runner.os }}-

    - name: Clone Linux Kernel
      run: |
        if [ -d "linux" ]; then
          rm -rf linux  # Удаляем существующую директорию, если она есть
        fi
        git clone https://github.com/STMicroelectronics/linux.git
        cd linux
        git checkout v6.1-stm32mp  # Переключаемся на стабильный тег

    - name: List available defconfigs
      run: |
        cd linux
        ls arch/arm/configs/

    - name: Generate kernel configuration
      run: |
        cd linux
        make stm32_defconfig # stm32mp157c-dk2_defconfig 

    - name: Modify kernel configuration
      run: |
        cd linux
        sed -i 's/CONFIG_XIP_KERNEL=y/# CONFIG_XIP_KERNEL is not set/' .config

    - name: Build Linux Kernel
      run: |
        cd linux
        make -j$(nproc) uImage dtbs

    - name: Build Ubuntu RootFS
      run: |
        sudo mkdir /mnt/ubuntu-rootfs
        sudo debootstrap focal /mnt/ubuntu-rootfs http://archive.ubuntu.com/ubuntu/

        # Монтируем необходимые файловые системы
        sudo mount --bind /dev /mnt/ubuntu-rootfs/dev
        sudo mount --bind /proc /mnt/ubuntu-rootfs/proc
        sudo mount --bind /sys /mnt/ubuntu-rootfs/sys

        # Копируем необходимые файлы для PAM
        sudo cp /etc/passwd /mnt/ubuntu-rootfs/etc/
        sudo cp /etc/shadow /mnt/ubuntu-rootfs/etc/
        sudo cp /etc/group /mnt/ubuntu-rootfs/etc/

        # Настраиваем базовые файлы
        sudo chroot /mnt/ubuntu-rootfs bash -c "echo 'root:password' | chpasswd"
        sudo chroot /mnt/ubuntu-rootfs bash -c "echo 'ubuntu:password' | chpasswd"

        # Устанавливаем необходимые пакеты
        sudo chroot /mnt/ubuntu-rootfs apt-get update
        sudo chroot /mnt/ubuntu-rootfs apt-get install -y systemd-sysv dbus network-manager sudo ssh

        # Настраиваем сетевые интерфейсы
        sudo chroot /mnt/ubuntu-rootfs bash -c "echo 'auto lo' > /etc/network/interfaces"
        sudo chroot /mnt/ubuntu-rootfs bash -c "echo 'iface lo inet loopback' >> /etc/network/interfaces"

        # Создаем пользователя ubuntu
        sudo chroot /mnt/ubuntu-rootfs useradd -m -s /bin/bash ubuntu
        sudo chroot /mnt/ubuntu-rootfs usermod -aG sudo ubuntu

        # Размонтируем файловые системы
        sudo umount /mnt/ubuntu-rootfs/dev
        sudo umount /mnt/ubuntu-rootfs/proc
        sudo umount /mnt/ubuntu-rootfs/sys

        # Упаковываем RootFS
        sudo tar -czvf ubuntu-rootfs.tar.gz -C /mnt/ubuntu-rootfs .

    - name: Package Image
      run: |
        mkdir -p output
        cp u-boot/u-boot.bin output/
        cp linux/arch/arm/boot/uImage output/
        cp linux/arch/arm/boot/dts/stm32mp157c-dk2.dtb output/
        cp ubuntu-rootfs.tar.gz output/  # Используем Ubuntu RootFS вместо Buildroot
        tar -czvf stm32mp157_image.tar.gz -C output .

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: stm32mp157_image
        path: stm32mp157_image.tar.gz
